---
title: "Example data analysis"
format: 
  html:
    toc: true
    self-contained: true
---


## 1. Import data

Principal functions reading data into R

-   `read.table`, `read.csv` (tabular data)
-   `readLines` (text file)
-   `load` (read in saved workspaces)
-   `source` (for reading in R code files)
\

#### Reading Data Files with `read.table()`

`read.table()` is one of the most commonly used functions for reading data. The help file is definitely worth reading in its entirety.

The `read.table()` function has a few important arguments:

-   `file`, the name of a file, or a connection
-   `header`, logical indicating if the file has a header line
-   `sep`, a string indicating how the columns are separated
-   `colClasses`, a character vector indicating the class of each column in the dataset
-   `nrows`, the number of rows in the dataset. By default `read.table()` reads an entire file.
-   `comment.char`, a character string indicating the comment character. This defaults to "\#".
-   `skip`, the number of lines to skip from the beginning
-   `stringsAsFactors`, should character variables be coded as factors? This defaults to TRUE.
\

::: callout-tip
**Reading larger datasets with R**

`read.table()` automatically estimates various parameters to store data. If you provide these this significantly speeds up the reading of large data sets.

-   Set `comment.char = ""` if there are no commented lines in your file.
-   Use the `colClasses` argument. Specifying this option instead of using the default can make 'read.table' run MUCH faster, often twice as fast. In order to use this option, you have to know the class of each column in your data frame. If all of the columns are "numeric", for example, then you can just set `colClasses = "numeric"`.
-   Set `nrows`. This doesn't make R run faster but it helps with memory usage. A mild overestimate is okay. 
:::


#### Now, let's import some data

```{r}

# use default parameters, missing parameters are estimated
data <- read.table(file = "data/my_data.txt") 

# assign parameters
data <- read.table(file = "data/my_data.txt", 
                   comment.char = "", 
                   header = TRUE,
                   colClasses = c(rep("numeric",4), "factor")
                   )
```
\

## 2. Data QC and exploration

Once you have imported your data it is always a good idea to inspect your data object:

-   `head()` = displays the first parts of an object
-   `attributes()` = lists the attributes of an object
-   `str()` = displays the internal structure of an R object or a diagnostic function
-   RStudio viewer `view()`

You may need to adjust the way you import your data!


#### Now you can start exploring your data using `summary()` `plot(density())` `boxplot()`

```{r}
#| eval: false

# rename the object
iris <- data

# basic summary statistics
summary(iris)

# density distribution
plot(density(iris$Sepal.Length))

# value distribution by group
boxplot(iris$Sepal.Length ~ iris$Species, col = c("black","red","green"))

# pairwise value plots
pairs(iris, col = iris$Species)
```
\

## 3. Data analysis

Lets find out how Sepal length and Petal length are related

```{r}
#| eval: false

# examine the relationship between Sepal and Petal Length
plot(iris$Sepal.Length, iris$Petal.Length, col = iris$Species)

# calculate Pearson correlation
cor.test(iris$Sepal.Length, iris$Petal.Length)


# FINAL PLOT
 
plot(iris$Sepal.Length, iris$Petal.Length,            # x variable, y variable
     col  = iris$Species,                             # colour by species
     pch  = 16,                                       # type of point to use
     xlab = "Sepal Length",                           # x axis label
     ylab = "Petal Length",                           # y axis label
     main = "Flower characteristics in Iris")         # plot title 

# legend with titles of iris$Species and colour 1:3, point type pch at coords (x,y)
legend("topleft", legend = levels(iris$Species), col = c(1:3), pch =16)

# text at coords (x,y) with label correlation test
text(x = 7.5, y = 2, labels = "cor = 0.871\np < 2.2e-16")
```

## 4. Export results

Saving images

-   export with RStudio through Plots \>\> save
-   alternatively use jpeg(), png(), svg() or pdf()

```{r}
#| eval: false
#| 
# open graphics device
png(file = "my_plot.png", width = 480, height = 480)

# plot
plot(iris$Sepal.Length, iris$Petal.Length,            # x variable, y variable
     col  = iris$Species,                             # colour by species
     pch  = 16,                                       # type of point to use
     xlab = "Sepal Length",                           # x axis label
     ylab = "Petal Length",                           # y axis label
     main = "Flower characteristics in Iris")         # plot title 

# legend with titles of iris$Species and colour 1:3, point type pch at coords (x,y)
legend("topleft", legend = levels(iris$Species), col = c(1:3), pch =16)

# text at coords (x,y) with label correlation test
text(x = 7.5, y = 2, labels = "cor = 0.871\np < 2.2e-16")

# close the device
dev.off()
```

Functions for writing data to files

-   `write.table` or `write.csv` (writing tabular data to text files, i.e. CSV, or connections)
-   `writeLines`(writing character data line-by-line to a file or connection)
-   `save` (saving an arbitrary number of R objects in binary format (possibly compressed) to a file)

```{r}

#| eval: false
# write your results to a file
write.table(iris,                       # dataframe
            file = "results.csv",       # filename
            sep  = ";",                 # field seperator
            col.names = TRUE,           # include header (default = TRUE)
            row.names = FALSE,          # include row names (default = TRUE)
            quote = FALSE)              # quote characters and factors

# save your data object
saveRDS(iris,                           #  data object
        file = "iris.rds")              #  file name
```

For more on basic R plots see [R Base Graphics: An Idiots Guide](https://rstudio-pubs-static.s3.amazonaws.com/7953_4e3efd5b9415444ca065b1167862c349.html)
